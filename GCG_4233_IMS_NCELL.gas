Program.Sub.ScreenSU.Start
Gui.NcellImport..create
Gui.NcellImport..caption("Import Ncell Files")
Gui.NcellImport..size(4230,1920)
Gui.NcellImport..position(0,0)
Gui.NcellImport..event(UnLoad,ncellimport_unload)
Gui.NcellImport..forecolor(0)
Gui.NcellImport..fontstyle(,,,)
Gui.NcellImport..BackColor(-2147483633)
Gui.NcellImport..maxbutton(False)
Gui.NcellImport..mousepointer(0)
Gui.NcellImport..sizeable(False)
Gui.NcellImport..MinX(0)
Gui.NcellImport..MinY(0)
Gui.NcellImport.cmdRun.create(button)
Gui.NcellImport.cmdRun.caption("Run Now")
Gui.NcellImport.cmdRun.size(840,645)
Gui.NcellImport.cmdRun.position(1605,105)
Gui.NcellImport.cmdRun.event(Click,Update)
Gui.NcellImport.lblStatus.create(label,"",True,3600,360,1,200,800,True,0,Arial,12,-2147483633,0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
Variable.UDT.material.Define("PART",String)
Variable.UDT.material.Define("QTY",Float)
Variable.UDT.material.Define("WO",String)
Variable.UDT.material.Define("SUFFIX",String)
Variable.UDT.material.Define("SEQ",String)
Variable.UDT.material.Define("ALL",Float)

Variable.UDT.Nest.Define("NestID",String)
Variable.UDT.Nest.Define("NestSuffix",String)
Variable.UDT.Nest.Define("Increment",String)
Variable.UDT.Nest.Define("Job",String)
Variable.UDT.Nest.Define("Suffix",String)
Variable.UDT.Nest.Define("MatSeq",String)
Variable.UDT.Nest.Define("LabSeq",String)
Variable.UDT.Nest.Define("BegDate",String)
Variable.UDT.Nest.Define("EndDate",String)
Variable.UDT.Nest.Define("WC",String)
Variable.UDT.Nest.Define("Part",String)
Variable.UDT.Nest.Define("PartLoc",String)
Variable.UDT.Nest.Define("SortOrder",String)
Variable.UDT.Nest.Define("BegDueDate",String)
Variable.UDT.Nest.Define("EndDueDate",String)
Variable.UDT.Nest.Define("FillerA",String)
Variable.UDT.Nest.Define("FillerB",String)
Variable.uGlobal.uNest.Declare("Nest")

Variable.UDT.MatUsed.Define("Part",String)
Variable.UDT.MatUsed.Define("Amount",Float)
Variable.uGlobal.uMatUsed.Declare("MatUsed")

Program.Sub.Preflight.End

Program.Sub.Main.Start
'CGI Ncell Import/Export
'Runs on any hook
'Refreshes every few minutes
V.Global.count.Declare(Float)
V.Local.sOpen.Declare(String)
V.Local.iPID.Declare(Long)
V.Local.sImportDir.Declare(String)
V.Local.sImportNest.Declare(String)
V.Local.sImportExport.Declare(String)
V.Local.sfileimport.Declare(String)
V.Local.ihwnd.Declare(Long)
V.Local.bexists.Declare(Boolean)

F.Intrinsic.String.Concat(V.Caller.PluginsDir,"\GAB\GAS\GCG_4233_IMS_NCELL.gas",V.Local.sOpen)

F.ODBC.Connection!conx.OpenConnection(V.Ambient.PDSN,V.Ambient.PUser,V.Ambient.PPass)
Gui.NcellImport..Show

'V.Local.sImportDir.Set("\\gss2k16bugshist\apps\67D\Shared Data\Ncell\Global_Data")

'V.Local.fTimerS.Declare(Float)
'V.Local.fTimerN.Declare(Float)

'F.Intrinsic.Control.Do
'	F.Intrinsic.UI.Timer(V.Local.fTimerS)
'	F.Intrinsic.Math.Add(V.Local.fTimerS,100,V.Local.fTimerS)
'	F.Intrinsic.Control.CallSub(Update)
'	F.Intrinsic.Control.Do
'		F.Intrinsic.UI.Timer(V.Local.fTimerN)
'		F.Intrinsic.UI.Sleep(1)
'		F.Intrinsic.Control.If(V.Local.fTimerN,>,V.Local.fTimerS)
'			F.Global.General.CallAsyncGAS(V.Local.sOpen,V.Local.iPID)
'			F.Intrinsic.Control.CallSub(Ncellimport_unload)
'			F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Local.sImportExport,V.Local.sFileimport)
'		F.Intrinsic.Control.EndIf
'	F.Intrinsic.Control.Loop
'F.Intrinsic.Control.Loop


Program.Sub.Main.End

Program.Sub.ncellimport_unload.Start
f.ODBC.Connection!conx.Close
F.Intrinsic.Control.End

Program.Sub.ncellimport_unload.End

Program.Sub.Update.Start
Gui.NcellImport.cmdRun.Enabled(false)

V.Local.sImportDir.Declare(String)
V.Local.sFileList.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sFileType.Declare(String)


V.Local.sImportDir.Set("\\imsfs01\Shared Data\Ncell\Global_Data\")
'f.Intrinsic.String.Build("{0}\Ncell\GLOBAL_DATA\",v.Caller.FilesDir,v.Local.sImportDir)

'get list of all files in the directory
F.Intrinsic.File.GetFileList(V.Local.sImportDir,V.Local.sFileList)
'if no files are found, exit program
F.Intrinsic.Control.If(V.Local.sFileList.Trim,=,"")
	F.Intrinsic.Control.CallSub(Ncellimport_unload)
F.Intrinsic.Control.EndIf

F.Intrinsic.String.Split(V.Local.sFileList,":",V.Local.sFileList)
'for each file, see that type it is and call appropriate sub to handle it.
F.Intrinsic.Control.For(V.Local.iFor,V.Local.sFileList.LBound,V.Local.sFileList.UBound,1)

	F.Intrinsic.String.Split(V.Local.sFileList(v.Local.iFor),"-",V.Local.sFileType)
	F.Intrinsic.Control.If(V.Local.sFileType(v.Local.sFileType.UBound).UCase,=,"COMMIT.CSV")
		F.Intrinsic.Control.CallSub(Commit,"File",V.Local.sFileList(v.Local.iFor))

	F.Intrinsic.Control.elseIf(V.Local.sFileType(v.Local.sFileType.UBound).UCase,=,"FS.TXT")
		F.Intrinsic.Control.CallSub(Fs,"File",V.Local.sFileList(v.Local.iFor))

	F.Intrinsic.Control.elseIf(V.Local.sFileType(v.Local.sFileType.UBound).UCase,=,"LM.TXT")
		F.Intrinsic.Control.CallSub(Lm,"File",V.Local.sFileList(v.Local.iFor))

	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)
F.Intrinsic.Control.CallSub(Ncellimport_unload)

Program.Sub.Update.End

Program.Sub.Commit.Start
'Update work order with size and material used from Ncell Commit File

V.uLocal.uMat.Declare(Material)
V.Local.sImportDir.Declare(String)
V.Local.sImport.Declare(String)
V.Local.sRow.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sParam.Declare(String)
V.Local.sbackup.Declare(String)
V.Local.sImportFile.Declare(String)
V.Local.smatseq.Declare(String)
V.Local.filler.Declare(String)
V.Local.sWO.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sMaterial.Declare(String)
V.Local.fUsage.Declare(Float)
V.Local.fQty.Declare(Float)
V.Local.r.Declare(Long)
V.Local.iWait.Declare(Long)
V.Local.ihwnd.Declare(Long)
V.Local.sNestId.Declare(String)
V.Local.iIncrement.Declare(Long)
V.Local.sIncrement.Declare(String)
V.Local.sWC.Declare(String)
V.Local.bexists.Declare(Boolean)
V.Local.iNestredim.Declare(Long)
V.Local.sparams.Declare(String)
V.Local.sDueDate.Declare(String)
V.Local.fTotalWt.Declare(Float)
V.Local.fThickness.Declare(Float)
V.Local.fDensity.Declare(Float)

V.Local.filler.Redim(0,3)
V.uLocal.uMat.Redim(0,0)
V.uLocal.uMat(0)!QTY.Set(0)

V.Local.sImportDir.Set("\\imsfs01\Shared Data\Ncell\Global_Data\")
'f.Intrinsic.String.Build("{0}\Ncell\GLOBAL_DATA",v.Caller.FilesDir,v.Local.sImportDir)

V.Local.iNestRedim.Set(-1)

F.Intrinsic.UI.InvokeWaitDialog("Initiating Interface","GSS-NCELL Interface",V.Local.ihwnd)

'Copy and Delete file here
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,V.Local.sImportFile)
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,".bkp",V.Local.sbackup)
F.Intrinsic.File.Exists(V.Local.sbackup,V.Local.bexists)
F.Intrinsic.Control.If(V.Local.bexists,=,True)
	F.Intrinsic.File.DeleteFile(V.Local.sbackup)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.CopyFile(V.Local.sImportFile,V.Local.sBackup)
F.Intrinsic.File.File2String(V.Local.sImportFile,V.Local.sImport)
F.Intrinsic.File.DeleteFile(V.Local.sImportFile)

'split on each line
F.Intrinsic.String.Split(V.Local.simport,V.Ambient.NewLine,V.Local.simport)
'for each line
F.Intrinsic.Control.For(V.Local.r,V.Local.simport.LBound,V.Local.simport.UBound,1)
	F.Intrinsic.UI.ChangeWaitStatus("Updating Nested Material",V.Local.iWait,0,V.Local.sImport.UBound)
	F.Intrinsic.Math.Add(V.Local.iWait,1,V.Local.iWait)
	F.Intrinsic.String.SplitCSV(V.Local.sImport(v.Local.r),V.Local.sRow)
'N=New nest
	F.Intrinsic.Control.If(V.Local.sRow(0),=,"N")
	'multiply Thickness * Density to get value to use in weight
		V.Local.iIncrement.Set(0)
		F.Intrinsic.String.LPad(V.Local.sRow(1),"0",6,V.Local.sNestId)
		V.Local.fThickness.Set(V.Local.sRow(2))
		V.Local.fDensity.Set(V.Local.sRow(6))
	F.Intrinsic.Control.EndIf

'S=sheet info.  Not used

'R= Raw material line
	F.Intrinsic.Control.If(V.Local.sRow(0).Trim,=,"(R)")
		V.Local.sMaterial.Set(V.Local.sRow(1).Trim)
	F.Intrinsic.Control.EndIf

'P= process line
	F.Intrinsic.Control.If(V.Local.sRow(0).Trim,=,"P")
		F.Intrinsic.Math.Add(V.Local.iNestRedim,1,V.Local.iNestRedim)
		F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)
			F.Intrinsic.String.LPad(V.Local.iIncrement,"0",6,V.Local.sIncrement)

		F.Intrinsic.String.Split(V.Local.sRow(2).Trim,"-",V.Local.sWO)
			V.Local.sWO.RedimPreserve(0,1)
			V.Local.sJob.Set(V.Local.sWO(0))
			V.Local.sSuffix.Set(V.Local.sWO(1))
		F.Intrinsic.String.Split(V.Local.sWO(1),":",V.Local.sSeq)
			V.Local.sSeq.RedimPreserve(0,1)
'
			V.Local.fUsage.Set(V.Local.sRow(7))
			V.Local.fQty.Set(V.Local.sRow(5))
			F.Intrinsic.Math.Mult(V.Local.fUsage,V.Local.fThickness,V.Local.fDensity,V.Local.fTotalWt)
			F.Intrinsic.Math.Round(V.Local.fTotalWt,4,V.Local.fTotalWt)

'update job with actual material being used
	'V.Local.fUsage will be calculation on "N" * PartAreaAllocSheet
		F.Intrinsic.Math.Mult(V.Local.fTotalWt,V.Local.sRow(7),V.Local.fUsage)
		F.Intrinsic.String.Concat("select * from JOB_OPERATIONS where LMO='M' and SEQ<'",V.Local.sSeq(1),"' and JOB='",V.Local.sWO(0).Trim,"' and SUFFIX='",V.Local.sSeq(0).Trim,"'",V.Local.sSQL)
		F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
				F.ODBC.conx!rstJobOps.Set!PART(V.Local.sMaterial.Trim)
				F.ODBC.conx!rstJobOps.Set!HOURS_ESTIMATED(V.Local.fTotalWt)
				F.ODBC.conx!rstJobOps.Update
				V.Local.sMatSeq.Set(V.ODBC.conx!rstJobOps.FieldValtrim!SEQ)
			F.Intrinsic.Control.EndIf
		F.ODBC.conx!rstJobOps.Close

		F.Intrinsic.String.Concat("select * from JOB_OPERATIONS where SEQ='",V.Local.sSeq(1).Trim,"' and JOB='",V.Local.sWO(0).Trim,"' and SUFFIX='",V.Local.sSeq(0).Trim,"'",V.Local.sSQL)
		F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
				V.Local.sWC.Set(V.ODBC.conx!rstJobOps.FieldValTrim!PART)
				F.ODBC.conx!rstJobOps.Set!UNITS_OPEN(V.Local.fQty)
				F.ODBC.conx!rstJobOps.Update
			F.Intrinsic.Control.EndIf
		F.ODBC.conx!rstJobOps.Close

		F.Intrinsic.String.RPad(V.Local.sWO(0)," ",6,V.Local.sWO(0))
		F.Intrinsic.String.RPad(V.Local.sSeq(0)," ",3,V.Local.sSeq(0))
'		F.Intrinsic.String.Concat(V.Local.sWO(0),V.Local.sSeq(0),V.Local.sMatSeq,V.Local.sWO)
		F.Intrinsic.String.Build("{0}!*!{1}!*!{2}",V.Local.sWO(0),V.Local.sSeq(0),V.Local.smatseq,V.Local.sParam)
	'create commitment for an active job
'		F.Intrinsic.String.Concat(V.Caller.CompanyCode,V.Local.sWO,V.Local.sParam)
'		F.Intrinsic.Task.LaunchGSSSync("JB0056A","-C",V.Local.sParam)
		F.Global.General.CallWrapperSync(2005,V.Local.sParam)

		F.Intrinsic.String.RPad(V.Local.sWO(0)," ",6,V.Local.sWO(0))
		F.Intrinsic.String.RPad(V.Local.sSeq(0)," ",3,V.Local.sSeq(0))
'		F.Intrinsic.String.Concat(V.Local.sWO(0),V.Local.sSeq(0),V.Local.sWO)
'		F.Intrinsic.String.Concat(V.Ambient.QuadQuote,V.Caller.CompanyCode,V.Local.sWO,"B","000000",V.Local.sDueDate,V.Ambient.QuadQuote,V.Local.sparams)
're-schedule the job with changes from comitment
'		F.Intrinsic.Task.LaunchGSSSync("jb0011cl","-c",V.Local.sParams)
'SFF removing this per Customer, they do NOT want the jobs re-scheduled - 01/26/2018
'		F.Global.APS.ScheduleJob(V.Local.sWO(0),V.Local.sSeq(0),"B",V.Ambient.Date)

	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.r)


Program.Sub.Commit.End

Program.Sub.LM.Start
V.Local.sFile.Declare(String)
V.Local.sbackup.Declare(String)
V.Local.bexists.Declare(Boolean)
V.Local.sImport.Declare(String)
V.Local.sLine.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sRow.Declare(String)
'V.Local.sRMPart.Declare(String)
'V.Local.sRMat.Declare(String)
'V.Local.sMMat.Declare(String)
'V.Local.iRcount.Declare(Long)
'V.Local.iMcount.Declare(Long)
'V.Local.iForMat.Declare(Long)
V.Local.iIncrement.Declare(Long)
'V.Local.sNestId.Declare(Long)
'V.Local.fTotmatUsed.Declare(Float)
'V.Local.ftotalsf.Declare(Float)
'V.Local.bEnoughMat.Declare(Boolean)
V.Local.sWO.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.sSeq.Declare(String)
V.Local.sHeat.Declare(String)
'V.Local.fMatUsed.Declare(Float)
V.Local.fMatIssue.Declare(Float)
'V.Local.fQIssue.Declare(Float)
V.Local.iNestRedim.Declare(Long)
V.Local.sIncrement.Declare(String)
V.Local.sDate.Declare(String)
V.Local.sTimeIn.Declare(String)
V.Local.sTimeOut.Declare(String)
V.Local.bNumeric.Declare(Boolean)
'V.Local.fLabUnits.Declare(Float)
'V.Local.fMatUnits.Declare(Float)
V.Local.fQTY.Declare(Float)
V.Local.fUnitsComplete.Declare(Float)
V.Local.sSQL.Declare(String)
V.Local.sMatSeq.Declare(String)
V.Local.sIssue.Declare(String)
V.Local.iHndl.Declare(Long)
V.Local.sImportDir.Declare(String)
V.Local.sImportFile.Declare(String)
V.Local.semployee.Declare(String)
V.Local.sClose.Declare(String)
V.Local.sQty.Declare(String)
V.Local.sLaborData.Declare(String)
V.Local.sWC.Declare(String)
V.Local.sMaterial.Declare(String)
V.Local.iBeforeFor.Declare(Long)
V.Local.iNestRedim.Set(-1)
V.Local.sLaborData.Set("")
V.Local.fTotalUnitsComplete.Declare(Float)
V.Local.fAddedUnitsComplete.Declare(Float)
V.Local.iLMdtFor.Declare(Long)
'employee will be 00999
V.Local.semployee.Set("00999")

V.Local.sImportDir.Set("\\imsfs01\Shared Data\Ncell\Global_Data\")
'f.Intrinsic.String.Build("{0}\Ncell\GLOBAL_DATA",v.Caller.FilesDir,v.Local.sImportDir)

'Copy and Delete file here
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,V.Local.sImportFile)
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,".bkp",V.Local.sbackup)
F.Intrinsic.File.Exists(V.Local.sbackup,V.Local.bexists)
F.Intrinsic.Control.If(V.Local.bexists,=,True)
	F.Intrinsic.File.DeleteFile(V.Local.sbackup)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.CopyFile(V.Local.sImportFile,V.Local.sBackup)
F.Intrinsic.File.File2String(V.Local.sImportFile,V.Local.sImport)
F.Intrinsic.File.DeleteFile(V.Local.sImportFile)

F.Data.DataTable.CreateFromString("LMdt", V.Local.sImport, "LineType*!*TimeIn*!*TimeOut*!*StartDate*!*EndDate*!*LaborUnits*!*Material*!*Router*!*JobSuffix*!*SEQ*!*Operation*!*UnitsComplete*!*MaterialUsed*!*MaterialIssued*!*HeatLot","STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*FLOAT*!*STRING*!*STRING*!*STRING*!*STRING*!*STRING*!*LONG*!*FLOAT*!*FLOAT*!*STRING",",",V.Ambient.NewLine,True)

F.Intrinsic.Control.For(V.Local.iFor,0,V.DataTable.LMdt.RowCount--,1)
	'N = new nest. Get NestID and reset Variables
	F.Intrinsic.Control.If(V.DataTable.LMdt(V.Local.iFor).LineType!FieldValTrim,=,"N")
		V.Local.iIncrement.Set(0)
	F.Intrinsic.Control.EndIf
	
	'M = Material Line
	F.Intrinsic.Control.If(V.DataTable.LMdt(V.Local.iFor).LineType!FieldValTrim,=,"M")
		'the column name says TimeOut but for material line it's actually the WKC
		V.Local.sWC.Set(V.DataTable.LMdt(V.Local.iFor).TimeOut!FieldValTrim)
	F.Intrinsic.Control.EndIf
	
	F.Intrinsic.Control.If(V.DataTable.LMdt(V.Local.iFor).LineType!fieldValTrim,=,"P")
		v.Local.fAddedUnitsComplete.Set(0.00)
		V.Local.fTotalUnitsComplete.Set(0.00)
		'material on P
		V.Local.sMaterial.Set(V.DataTable.LMdt(V.Local.iFor).Material!FieldValTrim)
		'get job, suffix, seq
		F.Intrinsic.String.Split(V.DataTable.LMdt(V.Local.iFor).JobSuffix!FieldValTrim,"-",V.Local.sWO)
		V.Local.sWO.RedimPreserve(0,1)
		V.Local.sJob.Set(V.Local.sWO(0))
		V.Local.sSuffix.Set(V.Local.sWO(1))
		V.Local.sSeq.Set(V.DataTable.LMdt(V.Local.iFor).SEQ!FieldValTrim)
		
		'they will post the lbs used, but use the dimensions used to determine material availablility
		V.Local.fMatIssue.Set(V.DataTable.LMdt(V.Local.iFor).MaterialIssued!FieldValFloat)
		
		'looping through the datatable again to see if any of the lines above or below match
		F.Intrinsic.Control.For(V.Local.iLMdtFor,0,V.DataTable.LMdt.RowCount--,1)
			'
			F.Intrinsic.Control.If(V.DataTable.LMdt(V.Local.iFor).JobSuffix!FieldValTrim,=,V.DataTable.LMdt(V.Local.iLMdtFor).JobSuffix!FieldValTrim,"AND",V.DataTable.LMdt(V.Local.iFor).SEQ!FieldValTrim,=,V.DataTable.LMdt(V.Local.iLMdtFor).SEQ!FieldValTrim)
				F.Intrinsic.Control.If(V.Local.fAddedUnitsComplete,>,0.00)
				'if there is already an amount in addedunits, it will add to it because that means it found a match before or after
					F.Intrinsic.Math.Add(V.DataTable.LMdt(V.Local.iLMdtFor).UnitsComplete!FieldValFloat,V.Local.fAddedUnitsComplete,V.Local.fAddedUnitsComplete)
				F.Intrinsic.Control.Else
					'if the addedunits is 0, it will set addedunits to whatever is in the unitscomplete column for that row
					V.Local.fAddedUnitsComplete.Set(V.DataTable.LMdt(V.Local.iLMdtFor).UnitsComplete!FieldValFloat)
				F.Intrinsic.Control.EndIf
				
			F.Intrinsic.Control.EndIf
		F.Intrinsic.Control.Next(V.Local.iLMdtFor)
		
		'verify qty complete
		'addedunits should always be greater than 0, but if it's not we handle for  that
		F.Intrinsic.Control.If(V.Local.fAddedUnitsComplete,>,0.00)
			F.Intrinsic.String.Concat("Select * from JOB_OPERATIONS where SEQ='",V.DataTable.LMdt(V.Local.iFor).SEQ!FieldValTrim,"' and JOB='",V.Local.sWO(0).Trim,"' and SUFFIX='",V.Local.sWO(1).Trim,"' order by SEQ",V.Local.sSQL)
			F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
				F.Intrinsic.Math.Add(V.ODBC.conx!rstJobOps.FieldVal!Units_Complete,V.Local.fAddedUnitsComplete,V.Local.fTotalUnitsComplete)
				F.Intrinsic.Control.If(V.Local.fTotalUnitsComplete,>=,V.ODBC.conx!rstJobOps.FieldVal!Units_Open)
					V.Local.sClose.Set("Y")
				F.Intrinsic.Control.Else
					V.Local.sClose.Set(" ")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.EndIf
			F.ODBC.conx!rstJobOps.Close
		F.Intrinsic.Control.Else
			V.Local.fUnitsComplete.Set(V.DataTable.LMdt(V.Local.iFor).UnitsComplete!FieldValFloat)
			'verify qty complete
			F.Intrinsic.String.Concat("Select * from JOB_OPERATIONS where SEQ='",V.DataTable.LMdt(V.Local.iFor).SEQ!FieldValTrim,"' and JOB='",V.Local.sWO(0).Trim,"' and SUFFIX='",V.Local.sWO(1).Trim,"' order by SEQ",V.Local.sSQL)
			F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
				F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
					F.Intrinsic.Math.Add(V.ODBC.conx!rstJobOps.FieldVal!Units_Complete,V.Local.fUnitsComplete,V.Local.fTotalUnitsComplete)
					F.Intrinsic.Control.If(V.Local.fTotalUnitsComplete,>=,V.ODBC.conx!rstJobOps.FieldVal!Units_Open)
						V.Local.sClose.Set("Y")
					F.Intrinsic.Control.Else
						V.Local.sClose.Set(" ")
					F.Intrinsic.Control.EndIf
				F.Intrinsic.Control.EndIf
			F.ODBC.conx!rstJobOps.Close
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Concat("Select * From JOB_OPERATIONS WHERE  LMO='M' AND SEQ <'",V.Local.sSeq.Trim,"' AND JOB='",V.Local.sWO(0).Trim,"' AND SUFFIX='",V.Local.sWO(1).Trim,"' order by SEQ",V.Local.sSQL)
				F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
					F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
						V.Local.sMATSEQ.Set(V.ODBC.conx!rstJobOps.FieldValTrim!SEQ)
						F.ODBC.conx!rstJobOps.Set!FLAG_CLOSED(V.Local.sClose)
						F.ODBC.conx!rstJobOps.Set!DATE_COMPLETED(v.Ambient.Date.FormatYYMMDD)
						F.ODBC.conx!rstJobOps.Update
					F.Intrinsic.Control.EndIf
				F.ODBC.conx!rstJobOps.Close
		
		F.Intrinsic.String.Concat(V.Local.sIssue,V.Local.sMaterial.Trim,",,,",V.Local.fMatIssue,",","",",","",",",V.Local.sHeat,",","",",",V.Local.sJob,",",V.Local.sSuffix,",",V.Local.sMATSEQ,V.Ambient.NewLine,V.Local.sIssue)
		
		'for labor update
		F.Intrinsic.Math.Add(V.Local.iNestRedim,1,V.Local.iNestRedim)
		F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)
			F.Intrinsic.String.LPad(V.Local.iIncrement,"0",6,V.Local.sIncrement)
		F.Intrinsic.String.Format(V.DataTable.LMdt(V.Local.iFor).StartDate!FieldValPervasiveDate,"MMDDYY",V.Local.sDate)
		F.Intrinsic.String.Split(V.DataTable.LMdt(V.Local.iFor).JobSuffix!FieldValTrim,"-",V.Local.sWO)
			V.Local.sWO.RedimPreserve(0,1)
		F.Intrinsic.String.Left(V.Datatable.LMdt(V.Local.iFor).TimeIn!FieldValTrim,5,V.Local.sTimeIn)
		F.Intrinsic.String.Left(V.Datatable.LMdt(V.Local.iFor).TimeOut!FieldValTrim,5,V.Local.sTimeOut)
		F.Intrinsic.String.Replace(V.Local.sTimeIn,":","",V.Local.sTimeIn)
		F.Intrinsic.String.Replace(V.Local.sTimeOut,":","",V.Local.sTimeOut)
		'checks to see if the unitscomplete is numeric
		F.Intrinsic.Math.IsNumeric(V.DataTable.LMdt(V.Local.iFor).UnitsComplete!FieldValFloat,V.Local.bNumeric)

		'if unitscomplete is numeric in the datatable, it will set the qty to what is in unitscomplete to be written to V.Local.sLaborData
		F.Intrinsic.Control.If(V.Local.bNumeric,=,True)
'			F.Intrinsic.Math.Div(V.Local.sRow(11),V.Local.sRow(5),V.Local.fLabUnits)
'			F.Intrinsic.Math.Div(V.Local.sRow(13),V.Local.sRow(11),V.Local.fMatUnits)
'			F.Intrinsic.Math.Mult(V.Local.sRow(11),10000,V.Local.fQTY)
			'callwrapper doesnt need to multiply by 10000 just need to format 
			F.Intrinsic.String.Format(V.DataTable.LMdt(V.Local.iFor).UnitsComplete!FieldValFloat,"0.0000",V.Local.sQty)
'			V.Local.sQty.Set(V.Local.fQTY)
			V.Local.fUnitsComplete.Set(V.DataTable.LMdt(V.Local.iFor).UnitsComplete!FieldValFloat)
		F.Intrinsic.Control.Else
'			V.Local.fLabUnits.Set(0)
'			V.Local.fMatUnits.Set(0)
			V.Local.fQTY.Set(0)
			V.Local.fUnitsComplete.Set(0)
		F.Intrinsic.Control.EndIf
			
		'wc on M line (L100)
		'employee='00999'
		F.Intrinsic.string.Concat(V.Local.sLaborData,V.Local.sDate,V.Ambient.Tab,V.Local.semployee,V.Ambient.Tab,V.Local.sWO(0),V.Ambient.Tab,V.Local.sWO(1),V.Ambient.Tab,V.Local.sSeq,V.Ambient.tab,V.Local.sWC.Trim,V.Ambient.tab,V.Local.sLaborData)
		F.Intrinsic.String.Concat(V.Local.sLaborData,"0",V.Ambient.Tab,V.Local.sClose,V.Ambient.tab,"D",V.Ambient.tab,V.Local.sTimeIn,V.Ambient.Tab,V.Local.sTimeOut,V.Ambient.tab,"L",V.Ambient.Tab,V.Local.sQty,V.Ambient.Tab,"0",V.Ambient.Tab,"0",V.Ambient.tab,V.Ambient.NewLine,V.Local.sLaborData)
		
	F.Intrinsic.Control.EndIf	
F.Intrinsic.Control.Next(V.Local.iFor)


'labor post to job
	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sLaborData)
	'F.Intrinsic.String.Concat(V.Ambient.DblQuote,V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Ambient.DblQuote,V.Local.sFile)
	
	'file name has to be setup like this for GAB runtime 2 
	F.Intrinsic.String.Build("{0}{1}MOPEN.txt",V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.Task.LaunchGSSSync("JB0455","-C",V.Local.sFile)
'material post to job
'	F.Intrinsic.String.Concat(V.Caller.FilesDir,"\L",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Local.sFile)
'	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sIssue)
'	F.Intrinsic.String.Concat(V.Ambient.DblQuote,"L",V.Caller.CompanyCode,V.Caller.Terminal,"MOPEN.txt",V.Ambient.DblQuote,V.Local.sFile)
'	F.Intrinsic.Task.LaunchGSSaSync("WIR100","-C",V.Local.sFile,V.Local.iHndl)
	F.Intrinsic.String.Build("{0}\L{1}{2}MOPEN.txt",V.Caller.FilesDir,V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Intrinsic.File.String2File(V.Local.sFile,V.Local.sIssue)
	F.Intrinsic.String.Build("L{0}{1}MOPEN.txt",V.Caller.CompanyCode,V.Caller.Terminal,V.Local.sFile)
	F.Global.General.CallWrapperSync(450100, v.Local.sFile)

Program.Sub.LM.End

Program.Sub.FS.Start
V.Local.sLoadFile.Declare(String)
V.Local.sLoadData.Declare(String)
V.Local.sFiller.Declare(String)
V.Local.iFor.Declare(Long)
V.Local.sUpdate.Declare(String)
V.Local.sCurrentNest.Declare(String)
V.Local.sChildJob.Declare(String)
V.Local.sParentJob.Declare(String)
V.Local.sParentSuffx.Declare(String)
V.Local.sJobOp.Declare(String)
V.Local.sWO.Declare(String)
V.Local.sJob.Declare(String)
V.Local.sSuffix.Declare(String)
V.Local.smatseq.Declare(String)
V.Local.sLabSeq.Declare(String)
V.Local.iSeq.Declare(Long)
V.Local.sSel.Declare(String)
V.Local.sImportDir.Declare(String)
V.Local.sImportFile.Declare(String)
V.Local.sImport.Declare(String)
V.Local.sbackup.Declare(String)
V.Local.bexists.Declare(Boolean)
V.Local.iNestRedim.Declare(Long)
V.Local.sNestId.Declare(String)
V.Local.sIncrement.Declare(String)
V.Local.sRow.Declare(String)
V.Local.sLine.Declare(String)
V.Local.sValue.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sNextWC.Declare(String)
V.Local.iIncrement.Declare(Long)
V.Local.iNestId.Declare(Long)

V.Local.sImportDir.Set("\\imsfs01\Shared Data\Ncell\Global_Data\")
'f.Intrinsic.String.Build("{0}\Ncell\GLOBAL_DATA",v.Caller.FilesDir,v.Local.sImportDir)

V.Local.iNestRedim.Set(-1)

'Copy and Delete file here
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,V.Local.sImportFile)
F.Intrinsic.String.Concat(V.Local.sImportDir,"\",V.Args.File,".bkp",V.Local.sbackup)
F.Intrinsic.File.Exists(V.Local.sbackup,V.Local.bexists)
F.Intrinsic.Control.If(V.Local.bexists,=,True)
	F.Intrinsic.File.DeleteFile(V.Local.sbackup)
F.Intrinsic.Control.EndIf

F.Intrinsic.File.CopyFile(V.Local.sImportFile,V.Local.sBackup)
F.Intrinsic.File.File2String(V.Local.sImportFile,V.Local.sImport)
F.Intrinsic.File.DeleteFile(V.Local.sImportFile)

F.Intrinsic.String.Split(V.Local.simport,V.Ambient.NewLine,V.Local.sLine)
'for each line
F.Intrinsic.Control.For(V.Local.iFor,V.Local.sLine.LBound,V.Local.sLine.UBound,1)
	F.Intrinsic.String.SplitCSV(V.Local.sLine(V.Local.iFor),V.Local.sRow)
	V.Local.sValue.Redim(0,0)
	V.Local.sWO.Redim(0,0)
'N=new nest ID
	F.Intrinsic.Control.If(V.Local.sRow(0),=,"N")
		F.Intrinsic.Control.If(V.Local.sRow(1).IsNumeric,=,"False")
			F.Intrinsic.Control.Next(V.Local.iFor)
		F.Intrinsic.Control.Else
			V.Local.iNestId.Set(V.Local.sRow(1))
			V.Local.iIncrement.Set(0)
		F.Intrinsic.Control.EndIf
		

'P=new job line
	F.Intrinsic.Control.ElseIf(V.Local.sRow(0),=,"P")
		F.Intrinsic.Control.If(V.Local.sRow(1),=,"P")
		'increment seq for each job on schedule
			F.Intrinsic.Math.Add(V.Local.iIncrement,1,V.Local.iIncrement)
			F.Intrinsic.Math.Add(V.Local.iNestRedim,1,V.Local.iNestRedim)

		'job=(3) Job - Suffix : Seq
			V.Local.sWO.Set(V.Local.sRow(3))
			F.Intrinsic.String.Split(V.Local.sWO,":",V.Local.sValue)
			V.Local.sValue.RedimPreserve(0,1)
			V.Local.sLabSeq.Set(V.Local.sValue(1))
			F.Intrinsic.String.Split(V.Local.sValue(0),"-",V.Local.sWO)
			V.Local.sWO.RedimPreserve(0,1)
			V.Local.sJob.Set(V.Local.sWO(0))
			F.Intrinsic.String.LPad(V.Local.sJob,"0",6,V.Local.sJob)
			V.Local.sSuffix.Set(V.Local.sWO(1))
			F.Intrinsic.String.LPad(V.Local.sSuffix,"0",3,V.Local.sSuffix)

		'get mat seq
			F.Intrinsic.String.Concat("select Seq from JOB_OPERATIONS where LMO = 'M' and SEQ < '",V.Local.sLabSeq,"' and JOB = '",V.Local.sJob.Trim,"' and SUFFIX = '",V.Local.sSuffix.Trim,"' order by SEQ desc",V.Local.sSQL)
			F.ODBC.Connection!conx.OpenRecordsetRW("rstJobOps",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.conx!rstJobOps.EOF,=,False)
				V.Local.smatseq.Set(V.ODBC.conx!rstJobOps.FieldVal!Seq)
			F.Intrinsic.Control.EndIf
			F.ODBC.Conx!rstJobOps.Close

		'get next workcenter for schedule
			F.Intrinsic.String.Concat("select Seq, Part from Job_Operations where LMO = 'L' and Job = '",V.Local.sJob,"' and Suffix = '",V.Local.sSuffix,"' and Seq > '",V.Local.sLabSeq,"' and Flag_Closed <> 'Y' and Flag_Set_Up <> 'Y' and Part <> '' order by Seq",V.Local.sSQL)
			F.ODBC.Connection!Conx.OpenRecordsetRO("rstB",V.Local.sSQL)
			F.Intrinsic.Control.If(V.ODBC.Conx!rstB.EOF,=,False)
				V.Local.sNextWC.Set(V.ODBC.Conx!rstB.FieldValTrim!Part)
				V.Local.sLabSeq.Set(V.ODBC.conx!rstB.FieldVal!Seq)
			F.Intrinsic.Control.EndIf
			F.ODBC.Conx!rstB.Close

'			F.Intrinsic.String.RPad(V.Local.sWO(1)," ",3,V.Local.sWO(1))
			V.uGlobal.uNest.RedimPreserve(0,V.Local.iNestRedim)
			F.Intrinsic.String.LPad(V.Local.iNestId,"0",6,V.Local.sNestId)
			V.uGlobal.uNest(v.Local.iNestRedim)!NestID.Set(V.Local.sNestId)
			F.Intrinsic.String.LPad(V.Local.iIncrement,"0",6,V.Local.sIncrement)
			V.uGlobal.uNest(v.Local.iNestRedim)!Increment.Set(V.Local.sIncrement)
			V.uGlobal.uNest(v.Local.iNestRedim)!Job.Set(V.Local.sJob)
			V.uGlobal.uNest(v.Local.iNestRedim)!Suffix.Set(V.Local.sSuffix)
			F.Intrinsic.String.LPad(V.Local.smatseq,"0",6,V.Local.smatseq)
			V.uGlobal.uNest(v.Local.iNestRedim)!MatSeq.Set(V.Local.smatseq)
			F.Intrinsic.String.LPad(V.Local.sLabSeq,"0",6,V.Local.sLabSeq)
			V.uGlobal.uNest(v.Local.iNestRedim)!LabSeq.Set(V.Local.sLabSeq)
			F.Intrinsic.String.RPad(V.Local.sNextWC," ",4,V.Local.sNextWC)
			V.uGlobal.uNest(v.Local.iNestRedim)!WC.Set(V.Local.sNextWC)
			F.Intrinsic.String.RPad(V.Local.sRow(2)," ",20,V.Local.sRow(2))
			V.uGlobal.uNest(v.Local.iNestRedim)!Part.Set(V.Local.sRow(2))
		F.Intrinsic.Control.EndIf
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)


F.Intrinsic.String.Concat(V.Caller.FilesDir,"\SCHED.txt",V.Local.sLoadFile)
'Nest ID,Nest Suffix, Increment, JOb, Suffix, Mat Seq, filler, Job, Suffix, Lab Seq, Beg Date, End Date, filler, wc, Part,Part Loc, sort orderm beginning due date, Ending Due Date

F.Intrinsic.String.LPad(V.Local.sFiller," ",3,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!NestSuffix,"",V.uGlobal.uNest!NestSuffix,V.Local.sFiller)
F.Intrinsic.String.LPad(V.Local.sFiller," ",5,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!FillerA,"",V.uGlobal.uNest!FillerA,V.Local.sFiller)
F.Intrinsic.String.LPad(V.Local.sFiller," ",25,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!FillerB,"",V.uGlobal.uNest!FillerB,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!BegDueDate,"",V.uGlobal.uNest!BegDueDate,"000000")
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!EndDueDate,"",V.uGlobal.uNest!EndDueDate,"999999")
F.Intrinsic.String.LPad(V.Local.sFiller," ",2,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!PartLoc,"",V.uGlobal.uNest!PartLoc,V.Local.sFiller)
F.Intrinsic.String.LPad(V.Local.sFiller,"0",3,V.Local.sFiller)
Function.Intrinsic.Variable.UDTMultiSeekSet(V.uGlobal.uNest!SortOrder,"",V.uGlobal.uNest!SortOrder,V.Local.sFiller)

'for every recod
F.Intrinsic.Control.For(V.Local.iFor,V.uGlobal.uNest.LBound,V.uGlobal.uNest.UBound,1)
	F.Intrinsic.Control.If(V.Local.ifor,=,0)
		F.Intrinsic.String.Concat(V.uGlobal.uNest(v.Local.iFor)!NestID,V.uGlobal.uNest(v.Local.iFor)!NestSuffix,V.uGlobal.uNest(v.Local.iFor)!Increment,V.uGlobal.uNest(v.Local.iFor)!Job,V.uGlobal.uNest(v.Local.iFor)!Suffix,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!MatSeq,V.uGlobal.uNest(v.Local.iFor)!FillerA,V.uGlobal.uNest(v.Local.iFor)!Job,V.uGlobal.uNest(v.Local.iFor)!Suffix,V.uGlobal.uNest(v.Local.iFor)!LabSeq,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!BegDueDate,V.uGlobal.uNest(v.Local.iFor)!EndDueDate,V.uGlobal.uNest(v.Local.iFor)!FillerB,V.uGlobal.uNest(v.Local.iFor)!WC,V.uGlobal.uNest(v.Local.iFor)!Part,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!PartLoc,V.uGlobal.uNest(v.Local.iFor)!SortOrder,V.uGlobal.uNest(v.Local.iFor)!BegDueDate,V.uGlobal.uNest(v.Local.iFor)!EndDueDate,V.Local.sLoadData)

	F.Intrinsic.Control.Else
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.Ambient.NewLine,V.uGlobal.uNest(v.Local.iFor)!NestID,V.uGlobal.uNest(v.Local.iFor)!NestSuffix,V.uGlobal.uNest(v.Local.iFor)!Increment,V.uGlobal.uNest(v.Local.iFor)!Job,V.uGlobal.uNest(v.Local.iFor)!Suffix,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!MatSeq,V.uGlobal.uNest(v.Local.iFor)!FillerA,V.uGlobal.uNest(v.Local.iFor)!Job,V.uGlobal.uNest(v.Local.iFor)!Suffix,V.uGlobal.uNest(v.Local.iFor)!LabSeq,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!BegDueDate,V.uGlobal.uNest(v.Local.iFor)!EndDueDate,V.uGlobal.uNest(v.Local.iFor)!FillerB,V.uGlobal.uNest(v.Local.iFor)!WC,V.uGlobal.uNest(v.Local.iFor)!Part,V.Local.sLoadData)
		F.Intrinsic.String.Concat(V.Local.sLoadData,V.uGlobal.uNest(v.Local.iFor)!PartLoc,V.uGlobal.uNest(v.Local.iFor)!SortOrder,V.uGlobal.uNest(v.Local.iFor)!BegDueDate,V.uGlobal.uNest(v.Local.iFor)!EndDueDate,V.Local.sLoadData)

	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iFor)

F.Intrinsic.File.String2File(V.Local.sLoadFile,V.Local.sLoadData)
F.Global.General.CallWrapperAsync(6000,"NS!*!52")

F.Intrinsic.Control.CallSub(Ncellimport_unload)


Program.Sub.FS.End

Program.Sub.Comments.Start
${$0$}$ATG_IMS_NCELL$}$JCT$}$4/3/2012$}$False
${$3$}$0$}$$}$-1$}$-1$}$$}$1/1/1900$}$For Integrated Manufacturing
Program.Sub.Comments.End
